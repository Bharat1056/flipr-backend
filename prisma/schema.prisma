generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InventoryAction {
  ADD
  REMOVE
  TRANSFER
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String

  categories Category[]
  staffs     Staff[]

  logs InventoryLog[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Staff {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String

  adminId   String
  admin     Admin    @relation(fields: [adminId], references: [id])
  assignedCategories UserCategory[]
  logs      InventoryLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  productType String

  products    Product[]
  assignedStaffs UserCategory[] 

  adminId     String
  admin       Admin      @relation(fields: [adminId], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model UserCategory {
  staff     Staff    @relation(fields: [staffId], references: [id])
  staffId   String

  category  Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([staffId, categoryId])
}

model Product {
  id             String         @id @default(uuid())
  name           String
  sku            String         @unique
  imageUrl       String?
  stock          Int            @default(0)
  alertThreshold Int            @default(10)

  categoryId     String
  category       Category       @relation(fields: [categoryId], references: [id])

  logs           InventoryLog[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model InventoryLog {
  id         String    @id @default(uuid())

  warehouseId String

  adminId     String?  
  admin       Admin?   @relation(fields: [adminId], references: [id])

  staffId     String?
  staff       Staff?   @relation(fields: [staffId], references: [id])

  actionType  String  

  entity      String   
  entityId    String   

  oldValue    String?
  newValue    String?

  reason      String?
  ipAddress   String?

  productId   String?
  product     Product? @relation(fields: [productId], references: [id])

  createdAt   DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  type      String  
  message   String
  status    String   
  createdAt DateTime @default(now())
}
