generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InventoryAction {
  ADD
  REMOVE
  TRANSFER
}

enum ProductCategoryType {
  ELECTRONICS
  FURNITURE
  CLOTHING
  FOOD
  OTHER
}

enum InventoryLogActionType {
  INCREASE
  DECREASE
}

enum NotificationType {
  STOCK_ADD
  STOCK_DELETE
  STOCK_THRESHOLD_REACHED
  STOCK_PRICE_INCREASE
  STOCK_PRICE_DECREASE
  STOCK_QUANTITY_INCREASE
  STOCK_QUANTITY_DECREASE

  CATEGORY_ADD
  CATEGORY_DELETE
  CATEGORY_UPDATE
  PRODUCT_ADD_TO_CATEGORY
  PRODUCT_REMOVE_FROM_CATEGORY
  PRODUCT_UPDATE_CATEGORY

  PRODUCT_ADD_TO_STAFF
  PRODUCT_REMOVE_FROM_STAFF
}

enum NotificationStatus {
  READ
  UNREAD
}

enum ProductStatus {
  GOOD
  CRITICAL
}

model Admin {
  id           String  @id @default(uuid())
  fullName     String
  username     String  @unique
  email        String  @unique
  password     String
  refreshToken String?

  categories    Category[]
  staffs        Staff[]
  logs          InventoryLog[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id           String  @id @default(uuid())
  fullName     String
  username     String  @unique
  email        String  @unique
  password     String
  refreshToken String?

  Category      Category[]     @relation("categoryStaff")
  Product       Product[]      @relation("productStaff")
  logs          InventoryLog[]
  notifications Notification[]

  adminId String
  admin   Admin  @relation(fields: [adminId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id           String              @id @default(uuid())
  name         String
  description  String?
  imageUrl     String?
  categoryType ProductCategoryType @default(OTHER)

  products      Product[]
  assignees     Staff[]        @relation("categoryStaff")
  logs          InventoryLog[]
  notifications Notification[]

  adminId String
  admin   Admin  @relation(fields: [adminId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id             String        @id @default(uuid())
  name           String
  imageUrl       String?
  description    String?
  numberOfStocks Int           @default(0)
  value          Int           @default(0)
  threshold      Int           @default(10)
  status         ProductStatus @default(GOOD)

  assignees     Staff[]        @relation("productStaff")
  logs          InventoryLog[]
  notifications Notification[]

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryLog {
  id   String  @id @default(uuid())
  note String?

  actionType InventoryLogActionType
  quantity   String?

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  Product    Product?  @relation(fields: [productId], references: [id])
  productId  String?
  Admin      Admin?    @relation(fields: [adminId], references: [id])
  adminId    String?
  Staff      Staff?    @relation(fields: [staffId], references: [id])
  staffId    String?

  createdAt DateTime @default(now())
}

model Notification {
  id      String             @id @default(uuid())
  type    NotificationType
  status  NotificationStatus @default(UNREAD)
  message String

  Admin      Admin?    @relation(fields: [adminId], references: [id])
  adminId    String?
  Staff      Staff?    @relation(fields: [staffId], references: [id])
  staffId    String?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  Product    Product?  @relation(fields: [productId], references: [id])
  productId  String?

  createdAt DateTime @default(now())
}
